
importToDataset[path_, type_, lines_, router_] := With[{i = Import[path, type, HeaderLines->lines]},
  If[FailureQ[i],
    Dataset[{$Failed}]
  ,
    With[{
      rowLength = Length[i[[1]]]
    },
      Join[{Table[InputCheckbox[router, u<=2, "Topic"->ToString[u]], {u,1,rowLength}]}, i] // Dataset
    ]
  ]
]

updatePreview[group_, ref_, dataset_] := With[{}, If[group =!= Null, Delete[group]];
      group = FrontInstanceGroup[];
      FrontSubmit[group[dataset], ref];
];

SetAttributes[updatePreview, HoldFirst]



Component[path_, parser_, opts_] := LeakyModule[{
    optsMutable = opts,
    DataPreview,
    DatasetObject,
    group = Null,
    hashMap = <|"1"->True, "2"->True|>,
    controller = CreateUUID[],
    params = <|"Thickness" -> Quantity[1, "Millimeters"], "Gain"->1, "Padding"->0|>,
    object
}, With[{
    ref = FrontInstanceReference[],
    router = EventObject[],
    ZerosPadding = InputRange[EventObject[<|"Id"->controller|>], 0, 4, 1, 0, "Label"->"Baseline padding xN", "Topic"->"zerospadding"],
    HeaderRange = InputRange[EventObject[<|"Id"->controller|>], 0, 4, 1, opts["Header"], "Label"->"Header lines", "Topic"->"range"],
    FormatSelect = InputSelect[EventObject[<|"Id"->controller|>], {"TSV", "CSV"}, opts["Format"], "Label"->"Format", "Topic"->"format"],
    UnitsSelection = InputSelect[EventObject[<|"Id"->controller|>], {"Microseconds", "Picoseconds", "Nanoseconds", "Femtoseconds"}, "Picoseconds", "Label"->"Time scale", "Topic"->"time"]
},

    dataset = importToDataset[path, optsMutable["Format"], optsMutable["Header"], router];

    EventHandler[router, {q_String :> Function[state, hashMap[q] = state; optsMutable["Cols"] = hashMap]}];
    
    group = FrontInstanceGroup[];
    DatasetObject = CreateFrontEndObject[{ref, group[ dataset  ]}];

    EventHandler[controller, {
        "range" -> Function[range,
            optsMutable["Header"] = range;
            dataset = importToDataset[path, optsMutable["Format"], optsMutable["Header"], router];
            updatePreview[group, ref, dataset];
        ],

        "zerospadding" -> Function[zerospadding,
            params["Padding"] = Round[zerospadding];
        ],

        "format" -> Function[format,
            optsMutable["Format"] = format;
            dataset = importToDataset[path, optsMutable["Format"], optsMutable["Header"], router];
            updatePreview[group, ref, dataset];
        ],

        "time" -> Function[time,
            optsMutable["Units"] = {time, 1};
        ],

        "thickness" -> Function[thickness,
            params["Thickness"] = Quantity[If[StringQ[#], ToExpression[#], #]& @ thickness, "Millimeters"];
        ],

        "gain" -> Function[gain,
            params["Gain"] = If[StringQ[#], ToExpression[#], #]& @ gain;

        ],
        
        "comments" -> Function[c,
            params["Notes"] = c;
        ]
    }];

    object["Get"] := {optsMutable, params};

    object["Destroy"] := With[{},
        ClearAll[optsMutable, params, object, DatasetObject, dataset, hashMap, group];
        EventRemove[router];
    ];

    object["View"] = With[{}, <div class="gap-x-2 flex h-full justify-between pr-2 divide-x flex-row mt-4">
        <div class="flex flex-col gap-y-2">
            <small>Data preview</small>
            <DatasetObject/>
        </div>
        <div class="gap-y-5 flex flex-col pl-5">
            <div class="flex flex-col gap-y-3">
                <FormatSelect/>
                <UnitsSelection/>
                <HeaderRange/>
                <ZerosPadding/>
            </div>
            <div class="pt-2">
                <div class="flex flex-col gap-y-2">
                    <h5 class="text-gray-900">Sample information</h5>
                    <div>
                        <label class="block mb-2 text-sm text-gray-900" for="thickness-input">Thickness (mm)</label>
                        <input min="0.0001" max="10" step="0.0001" value="1" type="number" id="thickness-input" class="block w-full p-2 py-1 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-xs focus:ring-blue-500 focus:border-blue-500"/>
                        <WebUIEventListener Id={"thickness-input"} Event={controller} Pattern={"thickness"} Type={"change"} />
                    </div>
                    <div>
                        <label class="block mb-2 text-sm text-gray-900" for="gain-input">Gain</label>
                        <input min="0.1" max="3" step="0.1" value="1" type="number" id="gain-input" class="block w-full p-2 py-1 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-xs focus:ring-blue-500 focus:border-blue-500"/>
                        <WebUIEventListener Id={"gain-input"} Event={controller} Pattern={"gain"} Type={"change"} />
                    </div>
                    <div>
                        <label class="block mb-2 text-sm text-gray-900" for="comments-input">Notes</label>
                        <input type="text" value="" id="comments-input" class="block w-full p-2 py-1 text-gray-900 border border-gray-300 rounded-lg bg-gray-50 text-xs focus:ring-blue-500 focus:border-blue-500"/>
                        <WebUIEventListener Id={"comments-input"} Event={controller} Pattern={"comments"} Type={"change"} />
                    </div>                  
                </div>                
            </div>
        </div>
    </div> ];

    object
] ]

Component